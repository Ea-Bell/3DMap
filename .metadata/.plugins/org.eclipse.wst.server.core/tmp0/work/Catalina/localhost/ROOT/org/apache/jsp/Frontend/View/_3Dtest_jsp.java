/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.30
 * Generated at: 2021-01-05 10:46:00 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.Frontend.View;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class _3Dtest_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("\r\n");
      out.write("<head>\r\n");
      out.write("    <title>Example 01.02 - First Scene</title>\r\n");
      out.write("    <script type=\"text/javascript\" src=\"/Frontend/script/three.js\"></script>\r\n");
      out.write("    <style>\r\n");
      out.write("        body {\r\n");
      out.write("            /* set margin to 0 and overflow to hidden, to go fullscreen */\r\n");
      out.write("            margin: 0;\r\n");
      out.write("            overflow: hidden;\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<!-- Div which will hold the Output -->\r\n");
      out.write("<div id=\"WebGL-output\">\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<!-- Javascript code that runs our Three.js examples -->\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\r\n");
      out.write("    // once everything is loaded, we run our Three.js stuff.\r\n");
      out.write("    function init() {\r\n");
      out.write("\r\n");
      out.write("        // create a scene, that will hold all our elements such as objects, cameras and lights.\r\n");
      out.write("        var scene = new THREE.Scene();\r\n");
      out.write("\r\n");
      out.write("        // create a camera, which defines where we're looking at.\r\n");
      out.write("        var camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n");
      out.write("\r\n");
      out.write("        // create a render and set the size\r\n");
      out.write("        var renderer = new THREE.WebGLRenderer();\r\n");
      out.write("        \r\n");
      out.write("        renderer.setClearColorHex();\r\n");
      out.write("        renderer.setClearColor(new THREE.Color(0xEEEEEE));\r\n");
      out.write("        renderer.setSize(window.innerWidth, window.innerHeight);\r\n");
      out.write("\r\n");
      out.write("        // show axes in the screen\r\n");
      out.write("        var axes = new THREE.AxisHelper(20);\r\n");
      out.write("        scene.add(axes);\r\n");
      out.write("\r\n");
      out.write("        // create the ground plane\r\n");
      out.write("        var planeGeometry = new THREE.PlaneGeometry(60, 20);\r\n");
      out.write("        var planeMaterial = new THREE.MeshBasicMaterial({color: 0xcccccc});\r\n");
      out.write("        var plane = new THREE.Mesh(planeGeometry, planeMaterial);\r\n");
      out.write("\r\n");
      out.write("        // rotate and position the plane\r\n");
      out.write("        plane.rotation.x = -0.5 * Math.PI;\r\n");
      out.write("        plane.position.x = 15;\r\n");
      out.write("        plane.position.y = 0;\r\n");
      out.write("        plane.position.z = 0;\r\n");
      out.write("\r\n");
      out.write("        // add the plane to the scene\r\n");
      out.write("        scene.add(plane);\r\n");
      out.write("\r\n");
      out.write("        // create a cube\r\n");
      out.write("        var cubeGeometry = new THREE.BoxGeometry(4, 4, 4);\r\n");
      out.write("        var cubeMaterial = new THREE.MeshBasicMaterial({color: 0xff0000, wireframe: true});\r\n");
      out.write("        var cube = new THREE.Mesh(cubeGeometry, cubeMaterial);\r\n");
      out.write("\r\n");
      out.write("        // position the cube\r\n");
      out.write("        cube.position.x = -4;\r\n");
      out.write("        cube.position.y = 3;\r\n");
      out.write("        cube.position.z = 0;\r\n");
      out.write("\r\n");
      out.write("        // add the cube to the scene\r\n");
      out.write("        scene.add(cube);\r\n");
      out.write("\r\n");
      out.write("        // create a sphere\r\n");
      out.write("        var sphereGeometry = new THREE.SphereGeometry(4, 20, 20);\r\n");
      out.write("        var sphereMaterial = new THREE.MeshBasicMaterial({color: 0x7777ff, wireframe: true});\r\n");
      out.write("        var sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);\r\n");
      out.write("\r\n");
      out.write("        // position the sphere\r\n");
      out.write("        sphere.position.x = 20;\r\n");
      out.write("        sphere.position.y = 4;\r\n");
      out.write("        sphere.position.z = 2;\r\n");
      out.write("\r\n");
      out.write("        // add the sphere to the scene\r\n");
      out.write("        scene.add(sphere);\r\n");
      out.write("\r\n");
      out.write("        // position and point the camera to the center of the scene\r\n");
      out.write("        camera.position.x = -30;\r\n");
      out.write("        camera.position.y = 40;\r\n");
      out.write("        camera.position.z = 30;\r\n");
      out.write("        camera.lookAt(scene.position);\r\n");
      out.write("\r\n");
      out.write("        // add the output of the renderer to the html element\r\n");
      out.write("        document.getElementById(\"WebGL-output\").appendChild(renderer.domElement);\r\n");
      out.write("\r\n");
      out.write("        // render the scene\r\n");
      out.write("        renderer.render(scene, camera);\r\n");
      out.write("    }\r\n");
      out.write("    window.onload = init;\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
