/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.30
 * Generated at: 2021-01-06 13:27:13 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.Frontend.View._3DTestViewFile;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.lang.Math;

public final class test용_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.lang.Math");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("    \n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\"/>\n");
      out.write("<script type=\"text/javascript\" src=\"/Frontend/script/libs/three.js\"></script>\n");
      out.write("<script type=\"text/javascript\" src=\"/Frontend/script/3D/3DTest.js\"></script>\n");
      out.write("<!-- 라이브러리선언 -->\n");
      out.write("\n");
      out.write("<script type=\"text/javascript\" src=\"/Frontend/script/lib/OBJLoader.js\"></script>\n");
      out.write("<style>\n");
      out.write("body {\n");
      out.write("\tmargin: 0;\n");
      out.write("\toverflow: hidden;\n");
      out.write("}\n");
      out.write("</style>\n");
      out.write("\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("<div id =\"WebGL-output\"></div>\n");
      out.write("\n");
      out.write("<!-- <script type=\"text/javascript\">\n");
      out.write("\n");
      out.write("function init() {\n");
      out.write("\t\n");
      out.write("\tvar scene = new THREE.Scene();\n");
      out.write("\tvar camera = new THREE.PerspectiveCamera(45, window.innerWidth/window.innerHeight, 0.1, 1000);\n");
      out.write("\tvar renderer = new THREE.WebGLRenderer();\n");
      out.write("\t\n");
      out.write("\trenderer.setClearColorHex();\n");
      out.write("\trenderer.setClearColor(new THREE.Color(0xEEEEEE));\n");
      out.write("\trenderer.setSize(window.innerWidth, window.innerHeight);\n");
      out.write("\t\n");
      out.write("\tvar axes = new THREE.AxisHelper(20);\n");
      out.write("\tscene.add(axes);\n");
      out.write("\t\n");
      out.write("\tvar planeGeometry= new THREE.PlaneGeometry(4, 20);\n");
      out.write("\tvar planeMaterial = new THREE.MeshBasicMaterial({color: 0xcccccc});\n");
      out.write("\tvar plane= new THREE.Mesh(planeGeometry, planeMaterial);\n");
      out.write("\t\n");
      out.write("\tplane.rotation.x=-0.5*Math.PI;\n");
      out.write("\tplane.position.x= 15;\n");
      out.write("\tplane.position.y=0;\n");
      out.write("\tplane.position.z=0;\n");
      out.write("\tscene.add(plane);\n");
      out.write("\t\n");
      out.write("\tvar cubeGeometry = new THREE.BoxGeometry(4,4,4);\n");
      out.write("\tvar cubeMaterial = new THREE.MeshBasicMaterial({color: 0xff0000, wireframe: true});\n");
      out.write("\tvar cube = new THREE.Mesh(cubeGeometry, cubeMaterial);\n");
      out.write("\tcube.position.x=-4;\n");
      out.write("\tcube.position.y=3;\n");
      out.write("\tcube.position.z=0;\n");
      out.write("\tscene.add(cube);\n");
      out.write("\t\n");
      out.write("\t\n");
      out.write("\tvar sphereGeometry = new THREE.SphereGeometry(4,4,4);\n");
      out.write("\tvar sphereMaterial = new THREE.MeshBasicMaterial({color: 0x7777ff, wireframe:true});\n");
      out.write("\tvar sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);\n");
      out.write("\tsphere.position.x= 20;\n");
      out.write("\tsphere.position.y=4;\n");
      out.write("\tsphere.position.z=2;\n");
      out.write("\t\n");
      out.write("\tscene.add(sphere);\n");
      out.write("\t\n");
      out.write("\tcamera.position.x=-30;\n");
      out.write("\tcamera.position.y=60;\n");
      out.write("\tcamera.position.z=30;\n");
      out.write("\tcamera.lookAt(scene.position);\n");
      out.write("\t\n");
      out.write("\tdocument.getElementById(\"WebGL-output\").appendChild(renderer.domElement);\n");
      out.write("\trenderer.render(scene, camera);\n");
      out.write("}\n");
      out.write("window.onload=init;\n");
      out.write("\n");
      out.write("\n");
      out.write("</script> -->\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
